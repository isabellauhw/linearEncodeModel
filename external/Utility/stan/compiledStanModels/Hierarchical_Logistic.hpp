// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace Hierarchical_Logistic_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "//qnap-al001.dpag.ox.ac.uk/code/Analysis/Utility/stan/compiledStanModels/Hierarchical_Logistic.stan");
    reader.add_event(94, 92, "end", "//qnap-al001.dpag.ox.ac.uk/code/Analysis/Utility/stan/compiledStanModels/Hierarchical_Logistic.stan");
    return reader;
}

class Hierarchical_Logistic_model : public prob_grad {
private:
        int numTrials;
        int numSessions;
        int numSubjects;
        std::vector<int> sessionID;
        std::vector<int> subjectID;
        vector_d contrastLeft;
        vector_d contrastRight;
        std::vector<int> choice;
public:
    Hierarchical_Logistic_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    Hierarchical_Logistic_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "Hierarchical_Logistic_model_namespace::Hierarchical_Logistic_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "numTrials", "int", context__.to_vec());
            numTrials = int(0);
            vals_i__ = context__.vals_i("numTrials");
            pos__ = 0;
            numTrials = vals_i__[pos__++];
            check_greater_or_equal(function__, "numTrials", numTrials, 1);

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "numSessions", "int", context__.to_vec());
            numSessions = int(0);
            vals_i__ = context__.vals_i("numSessions");
            pos__ = 0;
            numSessions = vals_i__[pos__++];
            check_greater_or_equal(function__, "numSessions", numSessions, 1);

            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "numSubjects", "int", context__.to_vec());
            numSubjects = int(0);
            vals_i__ = context__.vals_i("numSubjects");
            pos__ = 0;
            numSubjects = vals_i__[pos__++];
            check_greater_or_equal(function__, "numSubjects", numSubjects, 1);

            current_statement_begin__ = 8;
            validate_non_negative_index("sessionID", "numTrials", numTrials);
            context__.validate_dims("data initialization", "sessionID", "int", context__.to_vec(numTrials));
            sessionID = std::vector<int>(numTrials, int(0));
            vals_i__ = context__.vals_i("sessionID");
            pos__ = 0;
            size_t sessionID_k_0_max__ = numTrials;
            for (size_t k_0__ = 0; k_0__ < sessionID_k_0_max__; ++k_0__) {
                sessionID[k_0__] = vals_i__[pos__++];
            }
            size_t sessionID_i_0_max__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < sessionID_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sessionID[i_0__]", sessionID[i_0__], 1);
                check_less_or_equal(function__, "sessionID[i_0__]", sessionID[i_0__], numSessions);
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("subjectID", "numTrials", numTrials);
            context__.validate_dims("data initialization", "subjectID", "int", context__.to_vec(numTrials));
            subjectID = std::vector<int>(numTrials, int(0));
            vals_i__ = context__.vals_i("subjectID");
            pos__ = 0;
            size_t subjectID_k_0_max__ = numTrials;
            for (size_t k_0__ = 0; k_0__ < subjectID_k_0_max__; ++k_0__) {
                subjectID[k_0__] = vals_i__[pos__++];
            }
            size_t subjectID_i_0_max__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < subjectID_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subjectID[i_0__]", subjectID[i_0__], 1);
                check_less_or_equal(function__, "subjectID[i_0__]", subjectID[i_0__], numSubjects);
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("contrastLeft", "numTrials", numTrials);
            context__.validate_dims("data initialization", "contrastLeft", "vector_d", context__.to_vec(numTrials));
            contrastLeft = Eigen::Matrix<double, Eigen::Dynamic, 1>(numTrials);
            vals_r__ = context__.vals_r("contrastLeft");
            pos__ = 0;
            size_t contrastLeft_j_1_max__ = numTrials;
            for (size_t j_1__ = 0; j_1__ < contrastLeft_j_1_max__; ++j_1__) {
                contrastLeft(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "contrastLeft", contrastLeft, 0);
            check_less_or_equal(function__, "contrastLeft", contrastLeft, 1);

            current_statement_begin__ = 11;
            validate_non_negative_index("contrastRight", "numTrials", numTrials);
            context__.validate_dims("data initialization", "contrastRight", "vector_d", context__.to_vec(numTrials));
            contrastRight = Eigen::Matrix<double, Eigen::Dynamic, 1>(numTrials);
            vals_r__ = context__.vals_r("contrastRight");
            pos__ = 0;
            size_t contrastRight_j_1_max__ = numTrials;
            for (size_t j_1__ = 0; j_1__ < contrastRight_j_1_max__; ++j_1__) {
                contrastRight(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "contrastRight", contrastRight, 0);
            check_less_or_equal(function__, "contrastRight", contrastRight, 1);

            current_statement_begin__ = 12;
            validate_non_negative_index("choice", "numTrials", numTrials);
            context__.validate_dims("data initialization", "choice", "int", context__.to_vec(numTrials));
            choice = std::vector<int>(numTrials, int(0));
            vals_i__ = context__.vals_i("choice");
            pos__ = 0;
            size_t choice_k_0_max__ = numTrials;
            for (size_t k_0__ = 0; k_0__ < choice_k_0_max__; ++k_0__) {
                choice[k_0__] = vals_i__[pos__++];
            }
            size_t choice_i_0_max__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < choice_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "choice[i_0__]", choice[i_0__], 0);
                check_less_or_equal(function__, "choice[i_0__]", choice[i_0__], 1);
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            num_params_r__ += 1;
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            validate_non_negative_index("sd_sess", "3", 3);
            num_params_r__ += 3;
            current_statement_begin__ = 23;
            validate_non_negative_index("z_sess", "3", 3);
            validate_non_negative_index("z_sess", "numSessions", numSessions);
            num_params_r__ += (3 * numSessions);
            current_statement_begin__ = 24;
            validate_non_negative_index("rho_sess", "3", 3);
            validate_non_negative_index("rho_sess", "3", 3);
            num_params_r__ += ((3 * (3 - 1)) / 2);
            current_statement_begin__ = 27;
            validate_non_negative_index("sd_subj", "3", 3);
            num_params_r__ += 3;
            current_statement_begin__ = 28;
            validate_non_negative_index("z_subj", "3", 3);
            validate_non_negative_index("z_subj", "numSubjects", numSubjects);
            num_params_r__ += (3 * numSubjects);
            current_statement_begin__ = 29;
            validate_non_negative_index("rho_subj", "3", 3);
            validate_non_negative_index("rho_subj", "3", 3);
            num_params_r__ += ((3 * (3 - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~Hierarchical_Logistic_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 16;
        if (!(context__.contains_r("bias")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bias missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bias");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "bias", "double", context__.to_vec());
        double bias(0);
        bias = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(bias);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bias: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 17;
        if (!(context__.contains_r("sens_left")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sens_left missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sens_left");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sens_left", "double", context__.to_vec());
        double sens_left(0);
        sens_left = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sens_left);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sens_left: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 18;
        if (!(context__.contains_r("sens_right")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sens_right missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sens_right");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sens_right", "double", context__.to_vec());
        double sens_right(0);
        sens_right = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sens_right);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sens_right: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 19;
        if (!(context__.contains_r("sens_n_exp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sens_n_exp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sens_n_exp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sens_n_exp", "double", context__.to_vec());
        double sens_n_exp(0);
        sens_n_exp = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, sens_n_exp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sens_n_exp: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 22;
        if (!(context__.contains_r("sd_sess")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_sess missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_sess");
        pos__ = 0U;
        validate_non_negative_index("sd_sess", "3", 3);
        context__.validate_dims("parameter initialization", "sd_sess", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_sess(3);
        size_t sd_sess_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_sess_j_1_max__; ++j_1__) {
            sd_sess(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sd_sess);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_sess: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 23;
        if (!(context__.contains_r("z_sess")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_sess missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_sess");
        pos__ = 0U;
        validate_non_negative_index("z_sess", "3", 3);
        validate_non_negative_index("z_sess", "numSessions", numSessions);
        context__.validate_dims("parameter initialization", "z_sess", "matrix_d", context__.to_vec(3,numSessions));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_sess(3, numSessions);
        size_t z_sess_j_2_max__ = numSessions;
        size_t z_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_sess_j_1_max__; ++j_1__) {
                z_sess(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z_sess);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_sess: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 24;
        if (!(context__.contains_r("rho_sess")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_sess missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_sess");
        pos__ = 0U;
        validate_non_negative_index("rho_sess", "3", 3);
        validate_non_negative_index("rho_sess", "3", 3);
        context__.validate_dims("parameter initialization", "rho_sess", "matrix_d", context__.to_vec(3,3));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_sess(3, 3);
        size_t rho_sess_j_2_max__ = 3;
        size_t rho_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < rho_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_sess_j_1_max__; ++j_1__) {
                rho_sess(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(rho_sess);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_sess: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 27;
        if (!(context__.contains_r("sd_subj")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_subj missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_subj");
        pos__ = 0U;
        validate_non_negative_index("sd_subj", "3", 3);
        context__.validate_dims("parameter initialization", "sd_subj", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_subj(3);
        size_t sd_subj_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_subj_j_1_max__; ++j_1__) {
            sd_subj(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sd_subj);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_subj: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 28;
        if (!(context__.contains_r("z_subj")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_subj missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_subj");
        pos__ = 0U;
        validate_non_negative_index("z_subj", "3", 3);
        validate_non_negative_index("z_subj", "numSubjects", numSubjects);
        context__.validate_dims("parameter initialization", "z_subj", "matrix_d", context__.to_vec(3,numSubjects));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_subj(3, numSubjects);
        size_t z_subj_j_2_max__ = numSubjects;
        size_t z_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_subj_j_1_max__; ++j_1__) {
                z_subj(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z_subj);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_subj: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 29;
        if (!(context__.contains_r("rho_subj")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho_subj missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho_subj");
        pos__ = 0U;
        validate_non_negative_index("rho_subj", "3", 3);
        validate_non_negative_index("rho_subj", "3", 3);
        context__.validate_dims("parameter initialization", "rho_subj", "matrix_d", context__.to_vec(3,3));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_subj(3, 3);
        size_t rho_subj_j_2_max__ = 3;
        size_t rho_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < rho_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_subj_j_1_max__; ++j_1__) {
                rho_subj(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(rho_subj);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho_subj: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 16;
            local_scalar_t__ bias;
            (void) bias;  // dummy to suppress unused var warning
            if (jacobian__)
                bias = in__.scalar_constrain(lp__);
            else
                bias = in__.scalar_constrain();

            current_statement_begin__ = 17;
            local_scalar_t__ sens_left;
            (void) sens_left;  // dummy to suppress unused var warning
            if (jacobian__)
                sens_left = in__.scalar_lb_constrain(0, lp__);
            else
                sens_left = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 18;
            local_scalar_t__ sens_right;
            (void) sens_right;  // dummy to suppress unused var warning
            if (jacobian__)
                sens_right = in__.scalar_lb_constrain(0, lp__);
            else
                sens_right = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 19;
            local_scalar_t__ sens_n_exp;
            (void) sens_n_exp;  // dummy to suppress unused var warning
            if (jacobian__)
                sens_n_exp = in__.scalar_lub_constrain(0, 1, lp__);
            else
                sens_n_exp = in__.scalar_lub_constrain(0, 1);

            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sd_sess;
            (void) sd_sess;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_sess = in__.vector_lb_constrain(0, 3, lp__);
            else
                sd_sess = in__.vector_lb_constrain(0, 3);

            current_statement_begin__ = 23;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_sess;
            (void) z_sess;  // dummy to suppress unused var warning
            if (jacobian__)
                z_sess = in__.matrix_constrain(3, numSessions, lp__);
            else
                z_sess = in__.matrix_constrain(3, numSessions);

            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rho_sess;
            (void) rho_sess;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_sess = in__.cholesky_factor_corr_constrain(3, lp__);
            else
                rho_sess = in__.cholesky_factor_corr_constrain(3);

            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sd_subj;
            (void) sd_subj;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_subj = in__.vector_lb_constrain(0, 3, lp__);
            else
                sd_subj = in__.vector_lb_constrain(0, 3);

            current_statement_begin__ = 28;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z_subj;
            (void) z_subj;  // dummy to suppress unused var warning
            if (jacobian__)
                z_subj = in__.matrix_constrain(3, numSubjects, lp__);
            else
                z_subj = in__.matrix_constrain(3, numSubjects);

            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rho_subj;
            (void) rho_subj;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_subj = in__.cholesky_factor_corr_constrain(3, lp__);
            else
                rho_subj = in__.cholesky_factor_corr_constrain(3);

            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("log_pRpL", "numTrials", numTrials);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_pRpL(numTrials);
            stan::math::initialize(log_pRpL, DUMMY_VAR__);
            stan::math::fill(log_pRpL, DUMMY_VAR__);

            current_statement_begin__ = 33;
            validate_non_negative_index("b_sess", "3", 3);
            validate_non_negative_index("b_sess", "numSessions", numSessions);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> b_sess(3, numSessions);
            stan::math::initialize(b_sess, DUMMY_VAR__);
            stan::math::fill(b_sess, DUMMY_VAR__);

            current_statement_begin__ = 34;
            validate_non_negative_index("b_subj", "3", 3);
            validate_non_negative_index("b_subj", "numSubjects", numSubjects);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> b_subj(3, numSubjects);
            stan::math::initialize(b_subj, DUMMY_VAR__);
            stan::math::fill(b_subj, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 37;
            stan::math::assign(b_sess, multiply(diag_pre_multiply(sd_sess, rho_sess), z_sess));
            current_statement_begin__ = 38;
            stan::math::assign(b_subj, multiply(diag_pre_multiply(sd_subj, rho_subj), z_subj));
            {
            current_statement_begin__ = 42;
            local_scalar_t__ B(DUMMY_VAR__);
            (void) B;  // dummy to suppress unused var warning
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);

            current_statement_begin__ = 43;
            local_scalar_t__ SL(DUMMY_VAR__);
            (void) SL;  // dummy to suppress unused var warning
            stan::math::initialize(SL, DUMMY_VAR__);
            stan::math::fill(SL, DUMMY_VAR__);

            current_statement_begin__ = 44;
            local_scalar_t__ SR(DUMMY_VAR__);
            (void) SR;  // dummy to suppress unused var warning
            stan::math::initialize(SR, DUMMY_VAR__);
            stan::math::fill(SR, DUMMY_VAR__);


            current_statement_begin__ = 47;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 49;
                stan::math::assign(B, ((bias + get_base1(b_sess, 1, get_base1(sessionID, n, "sessionID", 1), "b_sess", 1)) + get_base1(b_subj, 1, get_base1(subjectID, n, "subjectID", 1), "b_subj", 1)));
                current_statement_begin__ = 50;
                stan::math::assign(SL, ((sens_left + get_base1(b_sess, 2, get_base1(sessionID, n, "sessionID", 1), "b_sess", 1)) + get_base1(b_subj, 2, get_base1(subjectID, n, "subjectID", 1), "b_subj", 1)));
                current_statement_begin__ = 51;
                stan::math::assign(SR, ((sens_right + get_base1(b_sess, 3, get_base1(sessionID, n, "sessionID", 1), "b_sess", 1)) + get_base1(b_subj, 3, get_base1(subjectID, n, "subjectID", 1), "b_subj", 1)));
                current_statement_begin__ = 53;
                stan::model::assign(log_pRpL, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((B + (SL * pow(get_base1(contrastLeft, n, "contrastLeft", 1), sens_n_exp))) + (SR * pow(get_base1(contrastRight, n, "contrastRight", 1), sens_n_exp))), 
                            "assigning variable log_pRpL");
            }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 32;
            size_t log_pRpL_j_1_max__ = numTrials;
            for (size_t j_1__ = 0; j_1__ < log_pRpL_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_pRpL(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_pRpL" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_pRpL: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 33;
            size_t b_sess_j_1_max__ = 3;
            size_t b_sess_j_2_max__ = numSessions;
            for (size_t j_1__ = 0; j_1__ < b_sess_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < b_sess_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(b_sess(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b_sess" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b_sess: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 34;
            size_t b_subj_j_1_max__ = 3;
            size_t b_subj_j_2_max__ = numSubjects;
            for (size_t j_1__ = 0; j_1__ < b_subj_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < b_subj_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(b_subj(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b_subj" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b_subj: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(bias, 0, 2));
            current_statement_begin__ = 60;
            lp_accum__.add(normal_log<propto__>(sens_left, 4, 3));
            current_statement_begin__ = 61;
            lp_accum__.add(normal_log<propto__>(sens_right, 4, 3));
            current_statement_begin__ = 62;
            lp_accum__.add(normal_log<propto__>(sens_n_exp, 0.6, 0.3));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(to_vector(z_sess), 0, 1));
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(to_vector(z_subj), 0, 1));
            current_statement_begin__ = 69;
            lp_accum__.add(cauchy_log<propto__>(sd_sess, 0, 1));
            current_statement_begin__ = 70;
            lp_accum__.add(cauchy_log<propto__>(sd_subj, 0, 1));
            current_statement_begin__ = 73;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(rho_sess, 2.0));
            current_statement_begin__ = 74;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(rho_subj, 2.0));
            current_statement_begin__ = 77;
            lp_accum__.add(bernoulli_logit_log<propto__>(choice, log_pRpL));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("bias");
        names__.push_back("sens_left");
        names__.push_back("sens_right");
        names__.push_back("sens_n_exp");
        names__.push_back("sd_sess");
        names__.push_back("z_sess");
        names__.push_back("rho_sess");
        names__.push_back("sd_subj");
        names__.push_back("z_subj");
        names__.push_back("rho_subj");
        names__.push_back("log_pRpL");
        names__.push_back("b_sess");
        names__.push_back("b_subj");
        names__.push_back("corr_sess");
        names__.push_back("corr_subj");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(numSessions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(numSubjects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numTrials);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(numSessions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(numSubjects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numTrials);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "Hierarchical_Logistic_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double bias = in__.scalar_constrain();
        vars__.push_back(bias);

        double sens_left = in__.scalar_lb_constrain(0);
        vars__.push_back(sens_left);

        double sens_right = in__.scalar_lb_constrain(0);
        vars__.push_back(sens_right);

        double sens_n_exp = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(sens_n_exp);

        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_sess = in__.vector_lb_constrain(0, 3);
        size_t sd_sess_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_sess_j_1_max__; ++j_1__) {
            vars__.push_back(sd_sess(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_sess = in__.matrix_constrain(3, numSessions);
        size_t z_sess_j_2_max__ = numSessions;
        size_t z_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_sess_j_1_max__; ++j_1__) {
                vars__.push_back(z_sess(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_sess = in__.cholesky_factor_corr_constrain(3);
        size_t rho_sess_j_2_max__ = 3;
        size_t rho_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < rho_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_sess_j_1_max__; ++j_1__) {
                vars__.push_back(rho_sess(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sd_subj = in__.vector_lb_constrain(0, 3);
        size_t sd_subj_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_subj_j_1_max__; ++j_1__) {
            vars__.push_back(sd_subj(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z_subj = in__.matrix_constrain(3, numSubjects);
        size_t z_subj_j_2_max__ = numSubjects;
        size_t z_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_subj_j_1_max__; ++j_1__) {
                vars__.push_back(z_subj(j_1__, j_2__));
            }
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rho_subj = in__.cholesky_factor_corr_constrain(3);
        size_t rho_subj_j_2_max__ = 3;
        size_t rho_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < rho_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_subj_j_1_max__; ++j_1__) {
                vars__.push_back(rho_subj(j_1__, j_2__));
            }
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("log_pRpL", "numTrials", numTrials);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_pRpL(numTrials);
            stan::math::initialize(log_pRpL, DUMMY_VAR__);
            stan::math::fill(log_pRpL, DUMMY_VAR__);

            current_statement_begin__ = 33;
            validate_non_negative_index("b_sess", "3", 3);
            validate_non_negative_index("b_sess", "numSessions", numSessions);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_sess(3, numSessions);
            stan::math::initialize(b_sess, DUMMY_VAR__);
            stan::math::fill(b_sess, DUMMY_VAR__);

            current_statement_begin__ = 34;
            validate_non_negative_index("b_subj", "3", 3);
            validate_non_negative_index("b_subj", "numSubjects", numSubjects);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_subj(3, numSubjects);
            stan::math::initialize(b_subj, DUMMY_VAR__);
            stan::math::fill(b_subj, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 37;
            stan::math::assign(b_sess, multiply(diag_pre_multiply(sd_sess, rho_sess), z_sess));
            current_statement_begin__ = 38;
            stan::math::assign(b_subj, multiply(diag_pre_multiply(sd_subj, rho_subj), z_subj));
            {
            current_statement_begin__ = 42;
            local_scalar_t__ B(DUMMY_VAR__);
            (void) B;  // dummy to suppress unused var warning
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);

            current_statement_begin__ = 43;
            local_scalar_t__ SL(DUMMY_VAR__);
            (void) SL;  // dummy to suppress unused var warning
            stan::math::initialize(SL, DUMMY_VAR__);
            stan::math::fill(SL, DUMMY_VAR__);

            current_statement_begin__ = 44;
            local_scalar_t__ SR(DUMMY_VAR__);
            (void) SR;  // dummy to suppress unused var warning
            stan::math::initialize(SR, DUMMY_VAR__);
            stan::math::fill(SR, DUMMY_VAR__);


            current_statement_begin__ = 47;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 49;
                stan::math::assign(B, ((bias + get_base1(b_sess, 1, get_base1(sessionID, n, "sessionID", 1), "b_sess", 1)) + get_base1(b_subj, 1, get_base1(subjectID, n, "subjectID", 1), "b_subj", 1)));
                current_statement_begin__ = 50;
                stan::math::assign(SL, ((sens_left + get_base1(b_sess, 2, get_base1(sessionID, n, "sessionID", 1), "b_sess", 1)) + get_base1(b_subj, 2, get_base1(subjectID, n, "subjectID", 1), "b_subj", 1)));
                current_statement_begin__ = 51;
                stan::math::assign(SR, ((sens_right + get_base1(b_sess, 3, get_base1(sessionID, n, "sessionID", 1), "b_sess", 1)) + get_base1(b_subj, 3, get_base1(subjectID, n, "subjectID", 1), "b_subj", 1)));
                current_statement_begin__ = 53;
                stan::model::assign(log_pRpL, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            ((B + (SL * pow(get_base1(contrastLeft, n, "contrastLeft", 1), sens_n_exp))) + (SR * pow(get_base1(contrastRight, n, "contrastRight", 1), sens_n_exp))), 
                            "assigning variable log_pRpL");
            }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t log_pRpL_j_1_max__ = numTrials;
                for (size_t j_1__ = 0; j_1__ < log_pRpL_j_1_max__; ++j_1__) {
                    vars__.push_back(log_pRpL(j_1__));
                }
                size_t b_sess_j_2_max__ = numSessions;
                size_t b_sess_j_1_max__ = 3;
                for (size_t j_2__ = 0; j_2__ < b_sess_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < b_sess_j_1_max__; ++j_1__) {
                        vars__.push_back(b_sess(j_1__, j_2__));
                    }
                }
                size_t b_subj_j_2_max__ = numSubjects;
                size_t b_subj_j_1_max__ = 3;
                for (size_t j_2__ = 0; j_2__ < b_subj_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < b_subj_j_1_max__; ++j_1__) {
                        vars__.push_back(b_subj(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 80;
            validate_non_negative_index("corr_sess", "3", 3);
            validate_non_negative_index("corr_sess", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_sess(3, 3);
            stan::math::initialize(corr_sess, DUMMY_VAR__);
            stan::math::fill(corr_sess, DUMMY_VAR__);

            current_statement_begin__ = 81;
            validate_non_negative_index("corr_subj", "3", 3);
            validate_non_negative_index("corr_subj", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> corr_subj(3, 3);
            stan::math::initialize(corr_subj, DUMMY_VAR__);
            stan::math::fill(corr_subj, DUMMY_VAR__);

            current_statement_begin__ = 82;
            validate_non_negative_index("log_lik", "numTrials", numTrials);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(numTrials);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 85;
            stan::math::assign(corr_sess, multiply(rho_sess, transpose(rho_sess)));
            current_statement_begin__ = 86;
            stan::math::assign(corr_subj, multiply(rho_subj, transpose(rho_subj)));
            current_statement_begin__ = 89;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 90;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            bernoulli_logit_log(get_base1(choice, n, "choice", 1), get_base1(log_pRpL, n, "log_pRpL", 1)), 
                            "assigning variable log_lik");
            }

            // validate, write generated quantities
            current_statement_begin__ = 80;
            stan::math::check_corr_matrix(function__, "corr_sess", corr_sess);

            size_t corr_sess_j_2_max__ = 3;
            size_t corr_sess_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < corr_sess_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corr_sess_j_1_max__; ++j_1__) {
                    vars__.push_back(corr_sess(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 81;
            stan::math::check_corr_matrix(function__, "corr_subj", corr_subj);

            size_t corr_subj_j_2_max__ = 3;
            size_t corr_subj_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < corr_subj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < corr_subj_j_1_max__; ++j_1__) {
                    vars__.push_back(corr_subj(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 82;
            size_t log_lik_j_1_max__ = numTrials;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "Hierarchical_Logistic_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "bias";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens_left";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens_right";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens_n_exp";
        param_names__.push_back(param_name_stream__.str());
        size_t sd_sess_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_sess_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_sess" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_sess_j_2_max__ = numSessions;
        size_t z_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_sess_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_sess" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_sess_j_2_max__ = 3;
        size_t rho_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < rho_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_sess_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_sess" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sd_subj_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_subj_j_2_max__ = numSubjects;
        size_t z_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_subj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_subj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_subj_j_2_max__ = 3;
        size_t rho_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < rho_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rho_subj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_subj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t log_pRpL_j_1_max__ = numTrials;
            for (size_t j_1__ = 0; j_1__ < log_pRpL_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_pRpL" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_sess_j_2_max__ = numSessions;
            size_t b_sess_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < b_sess_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_sess_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_sess" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b_subj_j_2_max__ = numSubjects;
            size_t b_subj_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < b_subj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_subj_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_subj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        size_t corr_sess_j_2_max__ = 3;
        size_t corr_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < corr_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_sess_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_sess" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t corr_subj_j_2_max__ = 3;
        size_t corr_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < corr_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < corr_subj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_subj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = numTrials;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "bias";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens_left";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens_right";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sens_n_exp";
        param_names__.push_back(param_name_stream__.str());
        size_t sd_sess_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_sess_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_sess" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_sess_j_2_max__ = numSessions;
        size_t z_sess_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_sess_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_sess_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_sess" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_sess_j_1_max__ = ((3 * (3 - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < rho_sess_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_sess" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sd_subj_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < sd_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_subj_j_2_max__ = numSubjects;
        size_t z_subj_j_1_max__ = 3;
        for (size_t j_2__ = 0; j_2__ < z_subj_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_subj_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_subj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rho_subj_j_1_max__ = ((3 * (3 - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < rho_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t log_pRpL_j_1_max__ = numTrials;
            for (size_t j_1__ = 0; j_1__ < log_pRpL_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_pRpL" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_sess_j_2_max__ = numSessions;
            size_t b_sess_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < b_sess_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_sess_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_sess" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b_subj_j_2_max__ = numSubjects;
            size_t b_subj_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < b_subj_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_subj_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_subj" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
        size_t corr_sess_j_1_max__ = ((3 * (3 - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corr_sess_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_sess" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t corr_subj_j_1_max__ = ((3 * (3 - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < corr_subj_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_subj" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = numTrials;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef Hierarchical_Logistic_model_namespace::Hierarchical_Logistic_model stan_model;

